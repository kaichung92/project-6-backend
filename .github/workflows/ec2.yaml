name: EC2 Deployment
on: [push, pull_request]

jobs:
  test:
    strategy:
      matrix:
        go-version: [1.17.x, 1.18.x]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    services:
        # Label used to access the service container
        postgres:
          # Docker Hub image
          image: postgres
          # Provide the password for postgres
          env:
          #   POSTGRES_PASSWORD: postgres

            POSTGRES_DB: "${{secrets.PSQL_DATABASENAME}}"        
            POSTGRES_USER: "${{secrets.psql_username}}"

          # Set health checks to wait until postgres has started
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
          ports:
            # Maps tcp port 5432 on service container to the host
            - ${{secrets.psql_port}}:5432
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
      - uses: actions/checkout@v3
      - name: Prepare configuration from Github Secrets
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "credentials.json"
          json: '{
    "jwt" : {
      "secret" : "${{secrets.jwt_secret}}"
    },
    "psql" : {
      "username":  "${{secrets.psql_username}}", 
      "database_name" :  "${{secrets.PSQL_DATABASENAME}}",
      "host":  "${{secrets.psql_host}}",  
      "port":  "${{secrets.psql_port}}" 
    },
    "oAuth" : {
      "google": {
          "client_id":  "${{secrets.oAuth_google_clientId}}",
          "client_secret":  "${{secrets.oAuth_google_clientSecret}}",
          "project_id":  "${{secrets.oAuth_google_projectId}}",
          "auth_uri":  "${{secrets.oAuth_google_authUri}}",
          "token_uri":  "${{secrets.oAuth_google_tokenUri}}",
          "auth_provider_x509_cert_url":  "${{secrets.oAuth_google_authProviderX509CertUrl}}"
        }
    },
    "network": {
      "domain":  "${{secrets.network_domain}}", 
      "port":  "${{secrets.network_port}}"
    },
    "session": { 
      "key":  "${{secrets.session_key}}"
    },
    "https": {
      "paths": {
        "cert_file_parent_var":  "${{secrets.https_paths_certFileParentVar}}", 
        "certificate":  "${{secrets.https_paths_certificate}}",
        "key":  "${{secrets.https_paths_key}}"
      }
    }
  }
'

      - name: Copy to intended
        run: |
          subpath="/customkeystore/test"
          sudo mkdir -p "$${{secrets.https_paths_certFileParentVar}}${subpath}"
          sudo cp credentials.json "$${{secrets.https_paths_certFileParentVar}}${subpath}/config.json"
        # run: |
        #   subpath="/customkeystore/test"
        #   echo "${{ secrets.MYCONFIG }}" | sudo tee "$${{secrets.https_paths_certFileParentVar}}${subpath}/config.json"
        #   cat "$${{secrets.https_paths_certFileParentVar}}${subpath}/config.json"
      - name: run pre commit hook
        run: ./githooks/pre-commit
